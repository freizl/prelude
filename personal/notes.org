* TODO Backlog items

  - auto-fill-mode?, break long line at word
  - what's fset?
  - diff between setq and setq-default? find it in Customerize section
  - ;;; set v.s. setq, find at Emacs Lisp introduction section #1.9
  -
  - tab complete in shell mode / or env variable setting in eshell
  - ;;; use term instead, but cant start term in Windows
  - ;;;;;; if eshell, probably update LISP Var PATH. HOW? getenv/setenv
  - ;;; if eshell, additional / was prefix into path while doing compile, can be resolved?
  -
  - outgoing email config at Windows/Linux
  - abbrev-mode


* dired mode

#+BEGIN_SRC elisp

;;  % d REGEXP <RET>
;;  % m REGEXP <RET>
;;  % g REGEXP <RET>
;;  M-{
;;  M-}

;;;; Moving over Subdirecoty
;; C-M-n / C-M-p, C-M-u / C-M-d
;;;; Subdirectory
;; i , C-u i; C-u k; l, C-u l
;;;; Hiding Subdirecotyr
;; $, M-$
;;;; Refresh the Dired buffer using SWITCHES
;; `C-u s SWITCHES <RET>'

#+END_SRC

* Macro

#+BEGIN_SRC elisp

;; Save macro                  name-last-kbd-macro ; then insert-kbd-macro
;; call macro                  call-last-kbd-macro (C-x e)
;; plays macro util rings the bell, C-u 0 C-x e

#+END_SRC

* Search

#+BEGIN_SRC elisp
;; C-s C-w
;; C-w C-y
;; C-w M-y
;; C-s RETURN searchstr RETURN
;; C-s RETURN C-w searchstr RETURN
#+END_SRC

* Funs / Vars

#+BEGIN_SRC elisp
;; transpose                   C-t, M-t, C-x C-t
;; count-lines-region          M-=
;; mark-whole-buffer           C-x h
;; mark-page                   C-x C-p
;; repeat                      C-x z
;; backward/forward sentence   M-a / M-e
;; goto-line                   M-g M-g
;; goto-char
;; beginning-of-buffer         M-<
;; end-of-buffer               M->
;; browser-url <RET> URL <RET>
;; transpose letter            C-t
;; transpose words             M-t
;; downcase word               M-l
;; upcase word                 M-u
;; downcase region             C-x C-l
;; upcase region               C-x C-u
;; Insert comments indent-for-comment    M-;
;; Evaluate a LISP exp         M-:
;; resume Emacs                %emacs (in most of common shells)
;; prev/next buffer            C-x left/right
;; kill through next occurrence of char      M-z char
;; kill sentence               M-k
;; auto re-visit the buffer    M-x auto-revert-mode and M-x auto-revert-tail-mode
;;                             http://www.emacswiki.org/emacs-en/RevertBuffer
;; Menu/Buffer Menu            C-Right Click; C-Left Click
;; Emacs Lisp Function Desc    C-h f pop-to-buffer
;; join to previous line       M-^
;; Save session                desktop-save, desktop-revert, desktop-clear, desktop-change-dir
;; Save seesion (older version config) (desktop-load-default) (desktop-read)
;; incremental search forward, refer to help of key <C-s>
;;                             C-s C-w, C-s C-y, C-s M-y; M-c, M-r, M-e
;; Frames                      C-x +
;; Blank Lines                 C-o, C-x C-o
;; Active Menu Bar             M-`
;; match brackets, equals % in VIM          forward-sexp / backward-sexp : C-M-f / C-M-b
;; fill paragraphs             M-q
;; fill region
;; set-default-font and use TAB to get font list
;; delete-matching-lines
;; delete-non-matching-lines
;; flush-lines
;; keep-lines
;; search/replace newline, instead of (\n) to use C-q C-j in the minibuffer
;; read only buffer            C-x C-q

;; insert-file                 C-x i
;; find-alternate-file         C-x C-v
;; set-fill-column             C-x f
;; M-x customize-face
;; M-x list-colors-display
;; buffer-menu                 C-x C-b

;; align-regexp
;; occurs                      M-x occur ; M-s o
;; butterfly ??
;; re-builder
;; rgrep
;; follow-mode
;; move point 3 words forward: hold down Meta and type 3f.
;; Let you go through all the history of copy and paste.    C-y M-y
;;
;; delete-trailing-whitespace
;; eval-print-last-sexp        C-j (at scratch buffer)
;; byte-recompile-directory

;; insert line break in search or replace: C-q C-j

#+END_SRC


* nXML mode

#+BEGIN_SRC elisp

;; indent-region C-M-\
;; M-q
;; C-M-u, C-M-d
;; C-RET
;; C-c C-f, C-c C-i / C-c C-b
;; C-c C-x : Inserts an XML processing instruction at the top of your file
;;
;; M-C-f        Move forward over tag.
;; M-C-b        Move backward over tag.
;; M-C-n        Move the cursor to the end of the next element.
;; M-C-p        Move the cursor before the previous element.
;; M-C-d        Move the cursor to the next included element after point
;; M-C-u        Move the cursor to a position just before the start tag of the element containing point
;; C-c C-o C-d  Hide the children of the current element, as in emacs outline-mode.
;; C-c C-o C-s  Reverses the action of C-c C-o C-d, revealing the children of the current element.

#+END_SRC

* Shell Mode

#+BEGIN_SRC elisp

;; default init scripts (Windows, it is BAT scripts though file ext is 'exe')  ~/.emacs_cmdproxy.exe
#+END_SRC

* tutorial notes

  - 8.2 numeric argument  M-1,M-2,...; C-u
  - 8.9 Cursor Position
  - 8.11 Repeat a Command C-x z
  - 9.3 Completion        SPC, TAB

* Others

#+BEGIN_SRC elisp

; hi-lock-mode       c-x w h, c-x w p, c-x w r, c-x w l, etc
; follow-mode !!
; ioccur      C-up / C-down / Return
; whitespace
; adaptive-wrap-prefix-mode
; hl-line
; mouse-avoidance-mode
; nlinum-mode
; memory-usage
; all
; winner-mode, winner-undo, restore windows config after c-x 1

#+END_SRC

* Reading Org Model Manual
  - org agenda view!!
  - org mode + diary + agenda view
  - org mode + plantuml
  - org mode + schedule timestamp + agenda view
  - ORDERED properties for TODO items
  - ~org-enforce-todo-checkbox-dependencies~
  - ~org-babel-load-languages~
  - ~org-capture~
  - ~org-export-backends~
  - speed command
    + (move cursor to beginning of headline and type ~?~ check
      command list)
  - org rss feed
  - eww, built in browser
  - footnotes: c-c c-x f
  - estimation
  - how to disable html export postamble?
    + disable globally ~org-html-postamble~
  - \iquest src code haskell isn't full functional
    + probably cause it's running in REPL (GHCi)
    + any customization?
  - \iquest export PDF with source code result images
    + because it doesn't support svg file well as default. ~includesvg~
  - *11.3 literal source code ref is kind of cool !!*
  - source code
    + ~:exports~
    + ~:tangle~
    + ~:results~
    + ~:dir~ and set it broadly??

** Table Test

| N | N^2 | N^3 | N^4 | sqrt(n) | sqrt(N) |
|---+-----+-----+-----+---------+------------|
| / |   < |     |   > |       < |          > |
| 1 |   1 |   1 |   1 |       1 |          1 |
| 2 |   4 |   8 |  16 |  1.4142 |     1.1892 |
| 3 |   9 |  27 |  81 |  1.7321 |     1.3161 |
|---+-----+-----+-----+---------+------------|
#+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))

** Source code
  - [[(xyz)][xyz source line]]

#+BEGIN_SRC emacs-lisp -n -r -l ";;; %s"
  ;;; start-file-process

  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))                                                    ;;; xyz

  ;;;
#+END_SRC


#+ATTR_HTML: :textarea t :width 20 :height 10
#+BEGIN_SRC sh
echo "hello"
#+END_SRC

#+BEGIN_SRC haskell -n :exports both :tangle yes
let main = print "Hello Okta"; test = print 123 in main >> test

#+END_SRC

#+RESULTS:
: Hello Okta

#+NAME: factorial
#+BEGIN_SRC haskell :results silent :exports code :var n=0

fac :: Int -> Int
let fac 0 = 1

#+END_SRC

- src_haskell{fac 5} =<interactive>:44:1: Not in scope: ‘fac’=

#+NAME: addHaskell
#+BEGIN_SRC haskell
f :: Int -> Int
let f = (+ 1)

main :: IO ()
main = do
      putStrLn $ show $ f 1
#+END_SRC

#+RESULTS: add
: 2


#+NAME: addPython
#+HEADER: :var a=2
#+BEGIN_SRC python :results silent :exports code :var b=8
return a + b;
#+END_SRC

#+CALL: addPython(a=3,b=10)

#+INCLUDE: "~/.emacs" src emacs-lisp

*** var
     #+BEGIN_SRC sh :var filename=(buffer-file-name) :exports both
       wc -w "$filename"
     #+END_SRC

     #+RESULTS:
     : 628 /Users/haisheng.wu/okta/Box Sync/org/10-others/misc.org

** Macro

#+MACRO: hellom replacement text $1; welcome to org world $2;

{{{hellom(arg1,arg2)}}}

** Symbols - another cool thing!
   - \alpha,\beta,\to,\gamma,\lambda,\Lambda,\pi,\Pi,\sum,\prod
   - see variable ~org-entries~
   - ~C-c C-x \~

* Footnotes

[fn:1] https://sites.google.com/site/steveyegge2/effective-emacs

* Projectile
  - how to clean unwanted Projects?
    + projectile-remove-known-project
    + ~/.emacs.d/projectile-bookmarks.eld~
